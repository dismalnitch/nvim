return {}
--   {
--   "yetone/avante.nvim",
--   event = "VeryLazy",
--   lazy = false,
--   version = "*", -- Set this to "*" to always pull the latest release version, or set it to false to update to the latest code changes.
--   opts = {
--     -- add any opts here
--     behaviour = {
--       auto_suggestions = false, -- Disable auto-suggestions
--     },
--     -- Workaround for Neovim LSP sync bug with avante
--     windows = {
--       position = "right",
--       wrap = true,
--       width = 30,
--       sidebar_header = {
--         align = "center",
--         rounded = true,
--       },
--     },
--     provider = "copilot", -- Default provider using Claude via GitHub Pro
--     providers = {
--       copilot = {
--         endpoint = "https://api.githubcopilot.com",
--         model = "claude-4-sonnet", -- Claude 4 Sonnet via GitHub Copilot
--         parse_curl_args = function(opts, code_opts)
--           return {
--             url = opts.endpoint .. "/chat/completions",
--             headers = {
--               ["authorization"] = "Bearer " .. os.getenv("GITHUB_TOKEN"),
--               ["content-type"] = "application/json",
--             },
--             body = {
--               model = opts.model,
--               messages = require("avante.providers").copilot.parse_message(
--                 code_opts
--               ),
--               stream = true,
--             },
--           }
--         end,
--         parse_response_data = function(data_stream, event_state, opts)
--           require("avante.providers").openai.parse_response(
--             data_stream,
--             event_state,
--             opts
--           )
--         end,
--       },
--       copilot_gpt4 = {
--         endpoint = "https://api.githubcopilot.com",
--         model = "gpt-4",
--         parse_curl_args = function(opts, code_opts)
--           return {
--             url = opts.endpoint .. "/chat/completions",
--             headers = {
--               ["authorization"] = "Bearer " .. os.getenv("GITHUB_TOKEN"),
--               ["content-type"] = "application/json",
--             },
--             body = {
--               model = opts.model,
--               messages = require("avante.providers").copilot.parse_message(
--                 code_opts
--               ),
--               stream = true,
--             },
--           }
--         end,
--         parse_response_data = function(data_stream, event_state, opts)
--           require("avante.providers").openai.parse_response(
--             data_stream,
--             event_state,
--             opts
--           )
--         end,
--       },
--     },
--     mappings = {
--       -- Add any custom mappings here
--       ask = "<leader>aa", -- ask
--       edit = "<leader>ae", -- edit
--       refresh = "<leader>ar", -- refresh
--       switch_provider = "<leader>ap", -- switch between copilot and claude
--       toggle = {
--         default = "<leader>at", -- toggle
--         debug = "<leader>ad", -- debug
--         hint = "<leader>ah", -- hint
--         suggestion = "<leader>as", -- suggestion
--       },
--     },
--   },
--   -- if you want to build from source then do `make BUILD_FROM_SOURCE=true`
--   build = "make",
--   -- build = "powershell -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false" -- for windows
--   dependencies = {
--     "stevearc/dressing.nvim",
--     "nvim-lua/plenary.nvim",
--     "MunifTanjim/nui.nvim",
--     --- The below dependencies are optional,
--     "echasnovski/mini.pick", -- for file_selector provider mini.pick
--     "nvim-telescope/telescope.nvim", -- for file_selector provider telescope
--     "saghen/blink.cmp", -- autocompletion for avante commands and mentions
--     "ibhagwan/fzf-lua", -- for file_selector provider fzf
--     "nvim-tree/nvim-web-devicons", -- or echasnovski/mini.icons
--     "zbirenbaum/copilot.lua", -- for providers='copilot'
--     {
--       -- support for image pasting
--       "HakonHarnes/img-clip.nvim",
--       event = "VeryLazy",
--       opts = {
--         -- recommended settings
--         default = {
--           embed_image_as_base64 = false,
--           prompt_for_file_name = false,
--           drag_and_drop = {
--             insert_mode = true,
--           },
--           -- required for Windows users
--           use_absolute_path = true,
--         },
--       },
--     },
--     {
--       -- Make sure to set this up properly if you have lazy=true
--       "MeanderingProgrammer/render-markdown.nvim",
--       opts = {
--         file_types = { "markdown", "Avante" },
--       },
--       ft = { "markdown", "Avante" },
--     },
--   },
-- }
